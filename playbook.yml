---
- name: deploy digitalocean vm
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ssh_pub_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    do_token: "{{ lookup('env', 'DIGITALOCEAN_API_TOKEN') }}"
    droplets:
      - name: droplet-02
        ssh_key_ids: 9832755
        droplet_name: droplet-02
        size_id: 1gb
        region_id: sfo2
        image_id: ubuntu-16-04-x64
        private_networking: yes
        backups_enabled: yes
        unique_name: yes
        block_volume: true
        block_volume_size: 10 #in gb
        block_volume_path: /mnt/vol-01
      - name: droplet-01
        ssh_key_ids: 9832755
        droplet_name: droplet-01
        size_id: 1gb
        region_id: sfo2
        image_id: ubuntu-16-04-x64
        private_networking: false
        backups_enabled: yes
        unique_name: yes
        block_volume: false
        block_volume_size: 10
        block_volume_path: /mnt/vol-01
  tasks:
    - name: Ensure SSH Key Exists on DigitalOcean
      digital_ocean:
        state: present
        command: ssh
        name: mike@mikes-mbp
        ssh_pub_key: "{{ ssh_pub_key }}"
        api_token: "{{ do_token }}"
    - name: Ensure droplets exist
      digital_ocean:
        state: present
        command: droplet
        name: "{{ item.name }}"
        unique_name: yes
        backups_enabled: "{{ item.backups_enabled }}"
        private_networking: "{{ item.private_networking }}"
        api_token: "{{ do_token }}"
        size_id: "{{ item.size_id }}"
        region_id: "{{ item.region_id }}"
        image_id: "{{ item.image_id }}"
        ssh_key_ids: "{{ item.ssh_key_ids }}"
        wait_timeout: 500
      with_items: "{{ droplets }}"
      register: do
    - name: Add new host to our digitalocean (do) inventory
      add_host:
        name: "{{ item.droplet.name }}"
        region: "{{ item.droplet.region.slug }}"
        ansible_host: "{%if 'private_networking' in item.droplet.features %}{{ item.droplet.networks.v4[1].ip_address }}{% else %}{{ item.droplet.ip_address }}{% endif %}"
        ansible_port: 22
        ip_address: "{%if 'private_networking' in item.droplet.features %}{{ item.droplet.networks.v4[1].ip_address }}{% else %}{{ item.droplet.ip_address }}{% endif %}"
        block_volume: "{{ item.item.block_volume }}"
        block_volume_size: "{{ item.item.block_volume_size }}"
        block_volume_path: "{{ item.item.block_volume_path }}"
        groups: do
      when: do.results is defined
      with_items: "{{ do.results }}"
- name: provision digitalocean vm
  hosts: do
  remote_user: root
  gather_facts: false
  vars:
    ssh_pub_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    do_token: "{{ lookup('env', 'DIGITALOCEAN_API_TOKEN') }}"
  pre_tasks:
    - name: Wait for port 22 to become available.
      local_action:
        module: wait_for
          host={{ ansible_host }}
          port={{ ansible_port }}
          delay=1
          timeout=300
    - name: "FIX: Ubuntu 16.04 LTS doesn't come with certain modules, required by ansible"
      raw: apt-get install python-simplejson python-minimal aptitude -y
      become: true
      become_user: root
      become_method: sudo
    - name: 'Gather Facts'
      setup:
    - name: Ensure block storage exists for droplet
      digital_ocean_block_storage:
        state: present
        command: create
        api_token: "{{ do_token }}"
        region: "{{ item.droplet.region.slug }}"
        block_size: "{{ item.item.block_volume_size}}"
        volume_name: "volume-{{ item.droplet.region.slug }}-{{ item.droplet.name }}"
      when: item.item.block_volume | default(false)
      with_items: "{{ hostvars.localhost.do.results }}"
    - name: Ensure block storage is attached to droplet
      digital_ocean_block_storage:
        state: present
        command: attach
        api_token: "{{ do_token }}"
        region: "{{ item.droplet.region.slug }}"
        block_size: "{{ item.item.block_volume_size }}"
        volume_name: "volume-{{ item.droplet.region.slug }}-{{ item.droplet.name}}"
        droplet_id: "{{ item.droplet.id }}"
      when: item.item.block_volume | default(false)
      with_items: "{{ hostvars.localhost.do.results }}"
    - name: Format digitalocean block volume
      filesystem:
        fstype: ext4
        dev: "/dev/disk/by-id/scsi-0DO_Volume_volume-{{ hostvars[inventory_hostname].region }}-{{ inventory_hostname }}"
      when: hostvars[inventory_hostname].block_volume | default(false)
    - name: Mount digitalocean block volume
      mount:
        src: "/dev/disk/by-id/scsi-0DO_Volume_volume-{{ hostvars[inventory_hostname].region }}-{{ inventory_hostname }}"
        path: "{{ hostvars[inventory_hostname].block_volume_path }}"
        state: mounted
        fstype: ext4
        opts: discard,defaults
      when: hostvars[inventory_hostname].block_volume | default(false)
  roles:
    - server
